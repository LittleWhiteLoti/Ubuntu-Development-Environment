Download and use github in Visual Studio Code

Setting up Github in Visual Studio Code
   1. Open up the terminal 
	   Terminal: sudo install apt-get
   2. Download Visual Studio Code from the Ubuntu store
	   
Syncing Visual Studio Code with Github.com account
- 
   1. Download GitHub extension
   2. Download GitHub Pull Requests and Issues extension
   3. Open terminal (Shortcut Ctrl + `)
      Terminal: git config --global user.name {{ USERNAME }}
      Terminal: git config --global user.email {{ EMAIL }}
   4. On the bottom left you should see account image with a number on it. Click it and it
      and select the option Sign in to user Github Pull Requests and Issues (1).
      Sign in to authorize the account.
   -  There are two options here: Temporarily switch ubuntu's default browser to chrome
   -  Ckise the page and keep repeating step 4. This took me around 5-10 times
   5. Click authorize and you'll eventually get a success message. A modal should pop up on 
      the browser asking if it is allowed to open vscode links. Click always. Navigate back
	   to Visual Studio Code and you will get the same prompt sort of message asking if 
	   visual studio code is allowed to always open up vs links. Click always allow.
	  
-- The instructions down below need to be edited / formatted

curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.26.1/install.sh | bash

Usage

To download, compile, and install the latest release of node, do this:

Go to /home/{{user}}/.nvm 
      Terminal: ./install.sh
      Terminal: nvm ls-remote (List all the versions of node)
      Terminal: nvm install {{ Version }}
   -  For some reason npm can't be found even though the node version is installed.
      Therefore you must do the last step to install it properly

nvm install node # "node" is an alias for the latest version

To install a specific version of node:

nvm install 6.14.4 # or 10.10.0, 8.9.1, etc

The first version installed becomes the default. New shells will start with the default version of node (e.g., nvm alias default).

You can list available versions using ls-remote:

nvm ls-remote

And then in any new shell just use the installed version:

nvm use node

Or you can just run it:

nvm run node --version

Or, you can run any arbitrary command in a subshell with the desired version of node:

nvm exec 4.2 node --version

You can also get the path to the executable to where it was installed:

nvm which 5.0

In place of a version pointer like "0.10" or "5.0" or "4.2.1", you can use the following special default aliases with nvm install, nvm use, nvm run, nvm exec, nvm which, etc:

    node: this installs the latest version of node
    iojs: this installs the latest version of io.js
    stable: this alias is deprecated, and only truly applies to node v0.12 and earlier. Currently, this is an alias for node.
    unstable: this alias points to node v0.11 - the last "unstable" node release, since post-1.0, all node versions are stable. (in SemVer, versions communicate breakage, not stability).
